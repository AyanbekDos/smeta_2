import os
import logging
import io
import json
import base64
import tempfile
import re
import gzip
import uuid
from datetime import datetime, timezone
from PIL import Image
import fitz  # PyMuPDF
import pandas as pd
import pyarrow as pa
import pyarrow.parquet as pq
import google.generativeai as genai
import asyncio
import httpx
import telegram
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from azure.core.credentials import AzureKeyCredential
from azure.ai.documentintelligence.aio import DocumentIntelligenceClient
from azure.ai.documentintelligence.models import AnalyzeResult, DocumentTable
from google.generativeai.types import GenerationConfig
from google.cloud import storage

# –î–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (Cloud Run)
from flask import Flask, request
import asyncio

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()

# API –ö–ª—é—á–∏
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_MODEL_NAME = os.getenv("GEMINI_MODEL_NAME", "gemini-1.5-pro-latest") # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ
AZURE_ENDPOINT = os.getenv("AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT")
AZURE_KEY = os.getenv("AZURE_DOCUMENT_INTELLIGENCE_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# Google Cloud Storage
GCS_BUCKET = os.getenv("GCS_BUCKET")
PROMPT_VERSION = os.getenv("PROMPT_VERSION", "v1.0")

genai.configure(api_key=GEMINI_API_KEY)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - [%(levelname)s] - (%(name)s) - %(message)s",
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
(SELECTING_ACTION, AWAITING_CONFIRMATION, AWAITING_MANUAL_PAGE, AWAITING_URL) = range(4)
TEMP_DIR = "temp_bot_files"
MAX_RETRIES = 3

# --- –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ ---

def get_prompt(file_path: str) -> str:
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        logger.error(f"Prompt file not found: {file_path}")
        return ""

def create_ocr_correction_prompt(ocr_text: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ OCR –æ—à–∏–±–æ–∫, –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏–∫—É –∏–∑ 2b_ocr_correction.py.
    """
    prompt = f"""
üîß –ó–ê–î–ê–ß–ê: –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—à–∏–±–æ–∫ OCR –≤ —Ç–∞–±–ª–∏—Ü–µ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞

üìã –ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢ OCR:
{ocr_text}

üéØ –¶–ï–õ–¨: –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ OCR —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã

‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:

1. **–†–ê–ó–ú–ï–†–´ –ü–†–û–§–ò–õ–ï–ô:**
   - 20–ë1, 20–ëI, 20BI ‚Üí 20–®1 (–¥–≤—É—Ç–∞–≤—Ä —à–∏—Ä–æ–∫–æ–ø–æ–ª–æ—á–Ω—ã–π)
   - [16n, [16–ø ‚Üí 16–ø (—à–≤–µ–ª–ª–µ—Ä)  
   - [200, [120 ‚Üí 200, 120 (—à–≤–µ–ª–ª–µ—Ä)
   - C247 ‚Üí 24–£ (—à–≤–µ–ª–ª–µ—Ä —Å —É–∫–ª–æ–Ω–æ–º)
   - +5, s5 ‚Üí s5 (–ª–∏—Å—Ç —Ç–æ–ª—â–∏–Ω–æ–π 5–º–º)
   - nucm ‚Üí –ª–∏—Å—Ç (–ø—Ä–æ—Å–µ—á–Ω–æ-–≤—ã—Ç—è–∂–Ω–æ–π)
   
2. **–ú–ê–†–ö–ò –°–¢–ê–õ–ò:**
   - –°5, –°—Ç5 ‚Üí –°—Ç3 (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ OCR –æ—à–∏–±–∫–∏)
   - –°6 ‚Üí –°235 (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
   - C255, C245, C275 ‚Üí –°255, –°245, –°275 (–ª–∞—Ç–∏–Ω—Å–∫–∞—è C ‚Üí –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è –°)
   
3. **–ù–ê–ó–í–ê–ù–ò–Ø –ü–†–û–§–ò–õ–ï–ô:**
   - –î–≤—É—Ç–∞–≤—Ä—ã ‚Üí –î–≤—É—Ç–∞–≤—Ä—ã —Å—Ç–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–µ–∫–∞—Ç–∞–Ω–Ω—ã–µ
   - –®–≤–µ–ª–ª–µ—Ä—ã ‚Üí –®–≤–µ–ª–ª–µ—Ä—ã —Å—Ç–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–µ–∫–∞—Ç–∞–Ω–Ω—ã–µ
   - –£–≥–æ–ª–∫–∏ ‚Üí –£–≥–æ–ª–∫–∏ —Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–≤–Ω–æ–ø–æ–ª–æ—á–Ω—ã–µ
   - –õ–∏—Å—Ç—ã ‚Üí –õ–∏—Å—Ç—ã —Å—Ç–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–µ–∫–∞—Ç–∞–Ω–Ω—ã–µ

4. **–ú–ê–°–°–´ –ò –ö–û–õ–ò–ß–ï–°–¢–í–ê:**
   - –ò—Å–ø—Ä–∞–≤—å –æ—á–µ–≤–∏–¥–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ —á–∏—Å–ª–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1O ‚Üí 10)
   - –°–æ—Ö—Ä–∞–Ω–∏ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –¥—Ä–æ–±–∏ –∫–∞–∫ –µ—Å—Ç—å
   
üö® –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
- –û—à–∏–±–∫–∏ OCR —á–∞—â–µ –≤ –ë–£–ö–í–ê–•, —Ü–∏—Ñ—Ä—ã –≤ 99% —Å–ª—É—á–∞–µ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
- –°–æ—Ö—Ä–∞–Ω–∏ –í–°–Æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã (—Å—Ç—Ä–æ–∫–∏, —Å—Ç–æ–ª–±—Ü—ã, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª—è–π –æ—à–∏–±–∫–∏
- –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü –∫–∞–∫ –µ—Å—Ç—å
- –ò—Å–ø—Ä–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ –û–ß–ï–í–ò–î–ù–´–ï –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è

üìã –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–π –∏—Å—Ö–æ–¥–Ω–æ–π.

üîç –ù–ê–ß–ò–ù–ê–ô –ö–û–†–†–ï–ö–¶–ò–Æ:
"""
    return prompt

def table_to_html(table: DocumentTable) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–∞–±–ª–∏—Ü—ã –∏–∑ Azure –≤ HTML-—Å—Ç—Ä–æ–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ—Å—Ç—É—é —Å–µ—Ç–æ—á–Ω—É—é –ª–æ–≥–∏–∫—É."""
    if not table.cells:
        return ""
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É —Ç–∞–±–ª–∏—Ü—ã
    grid = [['' for _ in range(table.column_count)] for _ in range(table.row_count)]
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ—Ç–∫—É —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —è—á–µ–µ–∫
    for cell in table.cells:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã –Ω–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–µ—Ç–∫–∏
        if cell.row_index < table.row_count and cell.column_index < table.column_count:
            grid[cell.row_index][cell.column_index] = cell.content or ''

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
    html_parts = ['<table border="1">']
    for row in grid:
        html_parts.append('<tr>')
        for cell_content in row:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏
            import html
            html_parts.append(f'<td>{html.escape(cell_content)}</td>')
        html_parts.append('</tr>')
    html_parts.append('</table>')
    
    return '\n'.join(html_parts)

def flatten_json_to_dataframe(data: dict) -> pd.DataFrame:
    flat_list = []
    unit = data.get("–µ–¥–∏–Ω–∏—Ü–∞_–∏–∑–º–µ—Ä–µ–Ω–∏—è", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    for profile, p_data in data.get("–ø—Ä–æ—Ñ–∏–ª–∏", {}).items():
        for steel, s_data in p_data.get("–º–∞—Ä–∫–∏_—Å—Ç–∞–ª–∏", {}).items():
            for size, z_data in s_data.get("—Ä–∞–∑–º–µ—Ä—ã", {}).items():
                # –ò–∑–º–µ–Ω–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫, –∞ –Ω–µ —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
                for e_data in z_data.get("—ç–ª–µ–º–µ–Ω—Ç—ã", []):
                    flat_list.append({
                        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è": profile,
                        "–ú–∞—Ä–∫–∞ —Å—Ç–∞–ª–∏": steel,
                        "–†–∞–∑–º–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è": size,
                        "–¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞": e_data.get("—Ç–∏–ø"), # –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –≤ —Å–ø–∏—Å–∫–µ
                        "–ü–æ–∑–∏—Ü–∏–∏": ", ".join(map(str, e_data.get("–ø–æ–∑–∏—Ü–∏–∏", []))),
                        f"–ú–∞—Å—Å–∞, {unit}": e_data.get("–º–∞—Å—Å–∞"),
                    })
    return pd.DataFrame(flat_list)

async def run_gemini_with_retry(model, prompt, content, user_id, generation_config=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Gemini —Å retry –ª–æ–≥–∏–∫–æ–π –∏ —Ç–∞–π–º–∞—É—Ç–æ–º. content –º–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–∞–π–ª–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º"""
    retries = 0
    last_exception = None
    request_options = {"timeout": 180}  # –¢–∞–π–º–∞—É—Ç 3 –º–∏–Ω—É—Ç—ã

    while retries < MAX_RETRIES:
        try:
            logger.info(f"[USER_ID: {user_id}] - Gemini API call attempt {retries + 1}")
            if generation_config:
                response = await model.generate_content_async(
                    [prompt, content], 
                    generation_config=generation_config, 
                    request_options=request_options
                )
            else:
                response = await model.generate_content_async(
                    [prompt, content], 
                    request_options=request_options
                )
            return response
        except Exception as e:
            last_exception = e
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
            is_retryable = (
                "500" in str(e) or 
                "internal error" in str(e).lower() or
                "InternalServerError" in str(e) or
                "ServiceUnavailable" in str(e) or
                "TooManyRequests" in str(e) or
                "DeadlineExceeded" in str(e)
            )
            
            if is_retryable:
                retries += 1
                wait_time = 5 * (2 ** (retries - 1))
                logger.warning(f"[USER_ID: {user_id}] - Server error ({e}). Retrying in {wait_time}s...")
                await asyncio.sleep(wait_time)
            else:
                logger.error(f"[USER_ID: {user_id}] - Non-retryable error: {e}")
                raise e
    
    logger.error(f"[USER_ID: {user_id}] - All {MAX_RETRIES} retry attempts failed")
    raise last_exception

def convert_file_sharing_url(url: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–æ–≤ –≤ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.
    """
    # Google Drive
    if "drive.google.com" in url:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ñ–∞–π–ª–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
        match = re.search(r'/d/([a-zA-Z0-9-_]+)', url)
        if match:
            file_id = match.group(1)
            return f"https://drive.google.com/uc?export=download&id={file_id}"
    
    # –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
    elif "disk.yandex" in url:
        # –î–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –Ω—É–∂–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π API-–∑–∞–ø—Ä–æ—Å
        return url  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
    
    # Dropbox
    elif "dropbox.com" in url:
        # –ó–∞–º–µ–Ω—è–µ–º dl=0 –Ω–∞ dl=1 –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        return url.replace("dl=0", "dl=1").replace("?dl=0", "?dl=1")
    
    # WeTransfer –∏ –¥—Ä—É–≥–∏–µ
    return url

async def download_file_from_url(url: str, user_id: int) -> bytes:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–æ–≤.
    """
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    download_url = convert_file_sharing_url(url)
    
    async with httpx.AsyncClient(timeout=300.0, follow_redirects=True) as client:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        try:
            head_response = await client.head(download_url, headers=headers)
            content_length = head_response.headers.get('content-length')
            if content_length and int(content_length) > 50 * 1024 * 1024:  # 50 MB –ª–∏–º–∏—Ç
                raise ValueError(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({int(content_length) / 1024 / 1024:.1f} –ú–ë). –ú–∞–∫—Å–∏–º—É–º 50 –ú–ë.")
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            pass
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        response = await client.get(download_url, headers=headers)
        response.raise_for_status()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        if len(response.content) > 50 * 1024 * 1024:
            raise ValueError(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({len(response.content) / 1024 / 1024:.1f} –ú–ë). –ú–∞–∫—Å–∏–º—É–º 50 –ú–ë.")
        
        return response.content

def is_valid_file_url(text: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ Dropbox.
    """
    url_pattern = r'https?://[^\s]+'
    if not re.match(url_pattern, text):
        return False
    
    return 'dropbox.com' in text.lower()

# --- Google Cloud Storage —Ñ—É–Ω–∫—Ü–∏–∏ ---

def prepare_telegram_image(page, user_id: int) -> io.BytesIO:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ (10x10 - 10000x10000 –ø–∏–∫—Å–µ–ª–µ–π)
    """
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤—ã–º DPI
    pix = page.get_pixmap(dpi=200)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Telegram
    max_attempts = 3
    attempt = 0
    
    while attempt < max_attempts:
        width, height = pix.width, pix.height
        
        if width < 10 or height < 10:
            # –†–∞–∑–º–µ—Ä—ã —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º DPI
            new_dpi = min(600, int(200 * (20 / min(width, height))))
            pix = page.get_pixmap(dpi=new_dpi)
            logger.info(f"[USER_ID: {user_id}] - Image too small ({width}x{height}), increasing DPI to {new_dpi}")
        elif width > 10000 or height > 10000:
            # –†–∞–∑–º–µ—Ä—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ - —É–º–µ–Ω—å—à–∞–µ–º DPI
            scale_factor = min(9999 / width, 9999 / height)
            new_dpi = max(50, int(200 * scale_factor))
            pix = page.get_pixmap(dpi=new_dpi)
            logger.info(f"[USER_ID: {user_id}] - Image too large ({width}x{height}), reducing DPI to {new_dpi}")
        else:
            # –†–∞–∑–º–µ—Ä—ã –≤ –Ω–æ—Ä–º–µ
            break
            
        attempt += 1
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º PIL –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    png_bytes = pix.tobytes("png")
    image = Image.open(io.BytesIO(png_bytes))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ PIL –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if image.width > 10000 or image.height > 10000:
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ PIL
        image.thumbnail((9999, 9999), Image.Resampling.LANCZOS)
        logger.info(f"[USER_ID: {user_id}] - Final resize via PIL to {image.width}x{image.height}")
    elif image.width < 10 or image.height < 10:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ PIL
        scale = max(2, 15 / min(image.width, image.height))
        new_size = (int(image.width * scale), int(image.height * scale))
        image = image.resize(new_size, Image.Resampling.LANCZOS)
        logger.info(f"[USER_ID: {user_id}] - Final upscale via PIL to {image.width}x{image.height}")
    
    img_buffer = io.BytesIO()
    image.save(img_buffer, format='PNG', optimize=True)
    img_buffer.seek(0)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
    final_size_mb = len(img_buffer.getvalue()) / 1024 / 1024
    logger.info(f"[USER_ID: {user_id}] - Final Telegram image: {image.width}x{image.height}, {final_size_mb:.1f}MB")
    
    # Telegram —Ç–∞–∫–∂–µ –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞ ~10MB
    if final_size_mb > 10:
        logger.warning(f"[USER_ID: {user_id}] - Image too large for Telegram ({final_size_mb:.1f}MB), compressing...")
        img_buffer = io.BytesIO()
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image.save(img_buffer, format='JPEG', quality=70, optimize=True)
        img_buffer.seek(0)
        final_size_mb = len(img_buffer.getvalue()) / 1024 / 1024
        logger.info(f"[USER_ID: {user_id}] - Compressed to JPEG: {final_size_mb:.1f}MB")
    
    return img_buffer

def clean_filename(filename: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ GCS"""
    if not filename:
        return "unknown"
    
    # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    name = os.path.splitext(filename)[0]
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    name = name.replace(" ", "_")
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–ª—Ñ–∞–≤–∏—Ç, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    name = re.sub(r'[^a-zA-Z–∞-—è—ë–ê-–Ø–Å0-9_]', '', name)
    
    return name or "unknown"

def format_utc_timestamp() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC –¥–ª—è –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏"""
    now = datetime.now(timezone.utc)
    # –§–æ—Ä–º–∞—Ç: 2025-08-02T14-30-45Z (–¥–≤–æ–µ—Ç–æ—á–∏—è –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã)
    return now.strftime("%Y-%m-%dT%H-%M-%SZ")

async def save_to_gcs(
    user_id: int,
    pdf_name: str,
    page_image_bytes: bytes,
    ocr_html: str,
    corrected_json: dict,
    find_prompt: str,
    extract_prompt: str
) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ Google Cloud Storage –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    if not GCS_BUCKET:
        logger.warning("GCS_BUCKET not configured, skipping archive")
        return False
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç GCS
        client = storage.Client()
        bucket = client.bucket(GCS_BUCKET)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å
        timestamp = format_utc_timestamp()
        clean_pdf_name = clean_filename(pdf_name)
        base_path = f"user_{user_id}/{clean_pdf_name}_{timestamp}"
        
        logger.info(f"[USER_ID: {user_id}] - Saving to GCS: {base_path}")
        
        # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º input.webp (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WebP lossless)
        webp_buffer = io.BytesIO()
        image = Image.open(io.BytesIO(page_image_bytes))
        image.save(webp_buffer, format='WEBP', lossless=True)
        webp_bytes = webp_buffer.getvalue()
        
        blob = bucket.blob(f"{base_path}/input.webp")
        blob.upload_from_string(webp_bytes, content_type='image/webp')
        
        # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º ocr_raw.html.gz
        html_gzipped = gzip.compress(ocr_html.encode('utf-8'))
        blob = bucket.blob(f"{base_path}/ocr_raw.html.gz")
        blob.upload_from_string(html_gzipped, content_type='application/gzip')
        
        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º corrected.json
        json_data = json.dumps(corrected_json, ensure_ascii=False, indent=2)
        blob = bucket.blob(f"{base_path}/corrected.json")
        blob.upload_from_string(json_data, content_type='application/json; charset=utf-8')
        
        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º find_prompt.txt (–ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü)
        blob = bucket.blob(f"{base_path}/find_prompt.txt")
        blob.upload_from_string(find_prompt, content_type='text/plain; charset=utf-8')
        
        # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º extract_prompt.txt (–ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
        blob = bucket.blob(f"{base_path}/extract_prompt.txt")
        blob.upload_from_string(extract_prompt, content_type='text/plain; charset=utf-8')
        
        # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º meta.json
        meta_data = {
            "user_id": user_id,
            "pdf_name": pdf_name,
            "clean_pdf_name": clean_pdf_name,
            "timestamp": timestamp,
            "timestamp_iso": datetime.now(timezone.utc).isoformat(),
            "find_prompt_length": len(find_prompt),
            "extract_prompt_length": len(extract_prompt),
            "processing_id": str(uuid.uuid4())
        }
        meta_json = json.dumps(meta_data, ensure_ascii=False, indent=2)
        blob = bucket.blob(f"{base_path}/meta.json")
        blob.upload_from_string(meta_json, content_type='application/json')
        
        logger.info(f"[USER_ID: {user_id}] - Successfully saved to GCS: {base_path}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—É—Ç–æ—á–Ω—ã–π Parquet (async task)
        asyncio.create_task(add_to_daily_parquet(
            user_id, clean_pdf_name, webp_bytes, ocr_html, corrected_json, find_prompt, extract_prompt
        ))
        
        return True
        
    except Exception as e:
        logger.error(f"[USER_ID: {user_id}] - Failed to save to GCS: {e}", exc_info=True)
        return False

async def add_to_daily_parquet(
    user_id: int,
    pdf_name: str, 
    webp_bytes: bytes,
    ocr_html: str,
    corrected_json: dict,
    find_prompt: str,
    extract_prompt: str
):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Å—É—Ç–æ—á–Ω—ã–π Parquet —Ñ–∞–π–ª
    """
    if not GCS_BUCKET:
        return
        
    try:
        client = storage.Client()
        bucket = client.bucket(GCS_BUCKET)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now(timezone.utc).strftime("%Y-%m-%d")
        parquet_path = f"dataset/{today}.parquet"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        new_record = {
            "png_webp": [webp_bytes],
            "ocr_html": [ocr_html],
            "corrected": [json.dumps(corrected_json, ensure_ascii=False)],
            "find_prompt": [find_prompt],
            "extract_prompt": [extract_prompt],
            "user_id": [user_id],
            "pdf_name": [pdf_name],
            "ts": [datetime.now(timezone.utc)]
        }
        
        new_df = pd.DataFrame(new_record)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª
        blob = bucket.blob(parquet_path)
        
        if blob.exists():
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
            existing_data = blob.download_as_bytes()
            existing_df = pd.read_parquet(io.BytesIO(existing_data))
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            combined_df = pd.concat([existing_df, new_df], ignore_index=True)
        else:
            combined_df = new_df
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        parquet_buffer = io.BytesIO()
        combined_df.to_parquet(parquet_buffer, compression='zstd', index=False)
        parquet_buffer.seek(0)
        
        blob.upload_from_file(parquet_buffer, content_type='application/octet-stream')
        
        logger.info(f"[USER_ID: {user_id}] - Added to daily parquet: {parquet_path}")
        
    except Exception as e:
        logger.error(f"[USER_ID: {user_id}] - Failed to add to parquet: {e}", exc_info=True)

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ --- 

async def process_specification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user_id = update.effective_user.id
    try:
        pdf_bytes = context.user_data["pdf_bytes"]
        page_number = context.user_data.get("manual_page_number") or context.user_data.get("found_page_number")

        await chat.send_message("üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...")
        pdf_document = fitz.open(stream=io.BytesIO(pdf_bytes), filetype="pdf")
        
        if page_number > len(pdf_document):
            pdf_document.close()
            await chat.send_message(f"–û—à–∏–±–∫–∞: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ {len(pdf_document)} —Å—Ç—Ä–∞–Ω–∏—Ü.")
            return
        
        page_to_ocr = pdf_document.load_page(page_number - 1)
        
        dpi = 300
        max_file_size = 4 * 1024 * 1024
        
        while dpi >= 150:
            pix = page_to_ocr.get_pixmap(dpi=dpi)
            png_bytes = pix.tobytes("png")
            if len(png_bytes) <= max_file_size:
                break
            dpi -= 50
        
        if len(png_bytes) > max_file_size:
            pdf_document.close()
            await chat.send_message("–û—à–∏–±–∫–∞: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return
            
        pdf_document.close()

        async with DocumentIntelligenceClient(endpoint=AZURE_ENDPOINT, credential=AzureKeyCredential(AZURE_KEY)) as client:
            poller = await client.begin_analyze_document("prebuilt-layout", png_bytes, content_type="application/octet-stream")
            result = await poller.result()
        if not result.tables:
            await chat.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
            return

        all_tables_html_parts = [table_to_html(table) for table in result.tables]
        full_html_content = "\n<hr>\n".join(all_tables_html_parts)

        await chat.send_message("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 3 –º–∏–Ω—É—Ç.")
        prompt = get_prompt("extract_and_correct.txt")
        model = genai.GenerativeModel(model_name=GEMINI_MODEL_NAME)
        response = await run_gemini_with_retry(
            model, 
            prompt, 
            full_html_content, 
            user_id, 
            generation_config=GenerationConfig(response_mime_type="application/json")
        )
        
        json_data = json.loads(response.text)

        await chat.send_message("üìä –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç—ã...")
        df = flatten_json_to_dataframe(json_data)
        txt_buffer = io.BytesIO(df.to_string(index=False).encode('utf-8'))
        xlsx_buffer = io.BytesIO()
        df.to_excel(xlsx_buffer, index=False, engine='openpyxl')
        xlsx_buffer.seek(0)

        pdf_file_name = context.user_data.get("pdf_file_name", "unknown")
        find_prompt = get_prompt("find_and_validate.txt")
        extract_prompt = get_prompt("extract_and_correct.txt")
        
        pdf_document = fitz.open(stream=io.BytesIO(pdf_bytes), filetype="pdf")
        page_for_archive = pdf_document.load_page(page_number - 1)
        archive_pix = page_for_archive.get_pixmap(dpi=300)
        archive_png_bytes = archive_pix.tobytes("png")
        pdf_document.close()
        
        await save_to_gcs(
            user_id=user_id,
            pdf_name=pdf_file_name,
            page_image_bytes=archive_png_bytes,
            ocr_html=full_html_content,
            corrected_json=json_data,
            find_prompt=find_prompt,
            extract_prompt=extract_prompt
        )

        await chat.send_message("‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:")
        await chat.send_document(document=InputFile(xlsx_buffer, filename="specification.xlsx"))
        await chat.send_document(document=InputFile(txt_buffer, filename="specification.txt"))
        logger.info(f"[USER_ID: {user_id}] - FINAL: Reports sent.")

    except Exception as e:
        logger.error(f"[USER_ID: {user_id}] - Error in process_specification: {e}", exc_info=True)
        await chat.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
    finally:
        context.user_data.clear()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = """üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

üìé **–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª** (–¥–æ 20 –ú–ë) –∏–ª–∏ 
üîó **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å Dropbox**

üí° Dropbox: https://dropbox.com"""
    
    await update.message.reply_text(welcome_message)
    return SELECTING_ACTION

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not update.message.document:
        return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –ü–ï–†–ï–î —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º ---
    if update.message.document.file_size > 20 * 1024 * 1024: # 20 MB limit
        file_size_mb = update.message.document.file_size / 1024 / 1024
        logger.warning(f"[USER_ID: {user_id}] - PDF rejected: file too large ({file_size_mb:.2f} MB).")
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        message = f"""üìÅ –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.1f} –ú–ë)

üö´ Telegram –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã –¥–æ 20 –ú–ë
‚úÖ –ù–æ –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å!

üîó **–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ Dropbox:**
üëâ https://dropbox.com

üì§ **–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É** –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç

üí° **–°–æ–≤–µ—Ç:** –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞

üëá **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å Dropbox –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:**"""

        await update.message.reply_text(message)
        return AWAITING_URL

    file_id = update.message.document.file_id
    file_name = update.message.document.file_name
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ GCS
    context.user_data["pdf_file_name"] = file_name
    
    await update.message.reply_text(f"–§–∞–π–ª '{file_name}' –ø—Ä–∏–Ω—è—Ç. –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")

    try:
        file_info = await context.bot.get_file(file_id)
        
        file_url = file_info.file_path

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º httpx –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø–æ—Ç–æ–∫–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        async with httpx.AsyncClient() as client:
            async with client.stream("GET", file_url) as response:
                response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
                
                pdf_bytes_io = io.BytesIO()
                async for chunk in response.aiter_bytes():
                    pdf_bytes_io.write(chunk)
                pdf_bytes_io.seek(0)
                pdf_bytes = pdf_bytes_io.read()

        context.user_data["pdf_bytes"] = pdf_bytes
        logger.info(f"[USER_ID: {user_id}] - File '{file_name}' downloaded successfully.")

    except telegram.error.BadRequest as e:
        logger.error(f"[USER_ID: {user_id}] - Error getting file info: {e}", exc_info=True)
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"[USER_ID: {user_id}] - Error downloading file: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.")
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    try:
        pdf_document_for_check = fitz.open(stream=io.BytesIO(pdf_bytes), filetype="pdf")
        num_pages = len(pdf_document_for_check)
        pdf_document_for_check.close()
        if num_pages > 100:
            logger.warning(f"[USER_ID: {user_id}] - PDF rejected: too many pages ({num_pages}).")
            await update.message.reply_text(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({num_pages} —Å—Ç—Ä–∞–Ω–∏—Ü). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–µ –±–æ–ª–µ–µ 100 —Å—Ç—Ä–∞–Ω–∏—Ü.")
            return ConversationHandler.END
    except Exception as e:
        logger.error(f"[USER_ID: {user_id}] - Failed to check PDF page count: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ PDF. –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
        return ConversationHandler.END

    await update.message.reply_text("‚úÖ –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç. –ò—â—É —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...")

    temp_pdf_path = None
    try:
        os.makedirs(TEMP_DIR, exist_ok=True)
        temp_pdf_path = os.path.join(TEMP_DIR, f"{user_id}_check.pdf")
        with open(temp_pdf_path, "wb") as f:
            f.write(pdf_bytes)

        logger.info(f"[USER_ID: {user_id}] - STEP 1: Performing validation and page search with Gemini.")
        gemini_file = genai.upload_file(path=temp_pdf_path)
        prompt = get_prompt("find_and_validate.txt")
        model = genai.GenerativeModel(model_name=GEMINI_MODEL_NAME)
        
        response = await run_gemini_with_retry(model, prompt, gemini_file, user_id)
        genai.delete_file(gemini_file.name)

        try:
            cleaned_text = response.text.replace("```json", "").replace("```", "").strip()
            result = json.loads(cleaned_text)
        except (json.JSONDecodeError, AttributeError, ValueError) as e:
            logger.error(f"[USER_ID: {user_id}] - Failed to decode Gemini response: {e}", exc_info=True)
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
            return ConversationHandler.END

        page_number = result.get("page", 0)
        if page_number == 0:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é.")
            return AWAITING_MANUAL_PAGE

        context.user_data["found_page_number"] = page_number
        pdf_document = fitz.open(stream=io.BytesIO(pdf_bytes), filetype="pdf")
        page = pdf_document.load_page(page_number - 1)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è Telegram
        img_buffer = prepare_telegram_image(page, user_id)
        pdf_document.close()

        keyboard = [[InlineKeyboardButton("‚úÖ –î–∞", callback_data="yes"), InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="no")]]
        
        try:
            await update.message.reply_photo(
                photo=img_buffer,
                caption=f"–≠—Ç–æ –≤–µ—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number})?",
                reply_markup=InlineKeyboardMarkup(keyboard),
            )
        except telegram.error.BadRequest as e:
            if "Photo_invalid_dimensions" in str(e):
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.warning(f"[USER_ID: {user_id}] - Failed to send photo, sending text message instead: {e}")
                await update.message.reply_text(
                    f"–ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}. –≠—Ç–æ –≤–µ—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞?",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                raise e
                
        return AWAITING_CONFIRMATION

    except Exception as e:
        logger.error(f"[USER_ID: {user_id}] - Error in handle_document: {e}", exc_info=True)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        return ConversationHandler.END
    finally:
        if temp_pdf_path and os.path.exists(temp_pdf_path):
            os.remove(temp_pdf_path)

async def handle_confirmation_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "yes":
        # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å caption, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.edit_message_caption(caption="–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        except telegram.error.BadRequest as e:
            if "There is no caption in the message to edit" in str(e):
                logger.info(f"No caption to edit, using edit_message_text instead: {e}")
                await query.edit_message_text(text="–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            else:
                raise e
        
        await process_specification(update, context)
        return ConversationHandler.END
    else:
        # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å caption, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.edit_message_caption(caption="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
        except telegram.error.BadRequest as e:
            if "There is no caption in the message to edit" in str(e):
                logger.info(f"No caption to edit, using edit_message_text instead: {e}")
                await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
            else:
                raise e
        
        return AWAITING_MANUAL_PAGE

async def handle_manual_page_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        page_number = int(update.message.text)
        context.user_data["manual_page_number"] = page_number
        await update.message.reply_text(f"–ü—Ä–∏–Ω—è—Ç–æ. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_number}...")
        await process_specification(update, context)
        return ConversationHandler.END
    except (ValueError):
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        return AWAITING_MANUAL_PAGE

async def handle_file_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª —Å —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫–∞.
    """
    user_id = update.effective_user.id
    url = update.message.text.strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL –¥–ª—è Dropbox
    file_name_from_url = "unknown"
    try:
        # –î–ª—è Dropbox —Å—Å—ã–ª–æ–∫ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏
        import urllib.parse
        parsed_url = urllib.parse.urlparse(url)
        path_parts = parsed_url.path.split('/')
        for part in path_parts:
            if part.endswith('.pdf'):
                file_name_from_url = part
                break
    except:
        file_name_from_url = "dropbox_file.pdf"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ GCS
    context.user_data["pdf_file_name"] = file_name_from_url
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
    if not is_valid_file_url(url):
        supported_services = """‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Dropbox

üîó –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ Dropbox:
üëâ https://dropbox.com

üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
        await update.message.reply_text(supported_services)
        return AWAITING_URL
    
    await update.message.reply_text("üîÑ –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        pdf_bytes = await download_file_from_url(url, user_id)
        logger.info(f"[USER_ID: {user_id}] - File downloaded from URL: {len(pdf_bytes)} bytes")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ PDF
        try:
            pdf_document = fitz.open(stream=io.BytesIO(pdf_bytes), filetype="pdf")
            num_pages = len(pdf_document)
            pdf_document.close()
        except Exception:
            await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–º.")
            return AWAITING_URL
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        if num_pages > 100:
            await update.message.reply_text(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({num_pages} —Å—Ç—Ä–∞–Ω–∏—Ü). –ú–∞–∫—Å–∏–º—É–º 100 —Å—Ç—Ä–∞–Ω–∏—Ü.")
            return AWAITING_URL
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        context.user_data["pdf_bytes"] = pdf_bytes
        await update.message.reply_text(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –ò—â—É —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...")
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ –æ–±—ã—á–Ω–æ
        temp_pdf_path = None
        try:
            os.makedirs(TEMP_DIR, exist_ok=True)
            temp_pdf_path = os.path.join(TEMP_DIR, f"{user_id}_check.pdf")
            with open(temp_pdf_path, "wb") as f:
                f.write(pdf_bytes)

            logger.info(f"[USER_ID: {user_id}] - STEP 1: Performing validation and page search with Gemini.")
            gemini_file = genai.upload_file(path=temp_pdf_path)
            prompt = get_prompt("find_and_validate.txt")
            model = genai.GenerativeModel(model_name=GEMINI_MODEL_NAME)
            
            response = await run_gemini_with_retry(model, prompt, gemini_file, user_id)
            genai.delete_file(gemini_file.name)

            try:
                cleaned_text = response.text.replace("```json", "").replace("```", "").strip()
                result = json.loads(cleaned_text)
            except (json.JSONDecodeError, AttributeError, ValueError) as e:
                logger.error(f"[USER_ID: {user_id}] - Failed to decode Gemini response: {e}", exc_info=True)
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
                return ConversationHandler.END

            page_number = result.get("page", 0)
            if page_number == 0:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é.")
                return AWAITING_MANUAL_PAGE

            context.user_data["found_page_number"] = page_number
            pdf_document = fitz.open(stream=io.BytesIO(pdf_bytes), filetype="pdf")
            page = pdf_document.load_page(page_number - 1)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è Telegram
            img_buffer = prepare_telegram_image(page, user_id)
            pdf_document.close()

            keyboard = [[InlineKeyboardButton("‚úÖ –î–∞", callback_data="yes"), InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="no")]]
            
            try:
                await update.message.reply_photo(
                    photo=img_buffer,
                    caption=f"–≠—Ç–æ –≤–µ—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number})?",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                )
            except telegram.error.BadRequest as e:
                if "Photo_invalid_dimensions" in str(e):
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    logger.warning(f"[USER_ID: {user_id}] - Failed to send photo, sending text message instead: {e}")
                    await update.message.reply_text(
                        f"–ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}. –≠—Ç–æ –≤–µ—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞?",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                else:
                    raise e
                    
            return AWAITING_CONFIRMATION

        except Exception as e:
            logger.error(f"[USER_ID: {user_id}] - Error in handle_file_url: {e}", exc_info=True)
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            return ConversationHandler.END
        finally:
            if temp_pdf_path and os.path.exists(temp_pdf_path):
                os.remove(temp_pdf_path)
        
    except ValueError as e:
        # –û—à–∏–±–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        await update.message.reply_text(f"‚ùå {str(e)}")
        return AWAITING_URL
    except Exception as e:
        logger.error(f"[USER_ID: {user_id}] - Error downloading file from URL: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
        return AWAITING_URL

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ ---
logger.info("Initializing Telegram Application...")
genai.configure(api_key=GEMINI_API_KEY)

# –°–æ–∑–¥–∞–µ–º ConversationHandler
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        SELECTING_ACTION: [
            MessageHandler(filters.Document.PDF, handle_document),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_file_url)
        ],
        AWAITING_CONFIRMATION: [CallbackQueryHandler(handle_confirmation_choice)],
        AWAITING_MANUAL_PAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_manual_page_input)],
        AWAITING_URL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_file_url)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

# –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
telegram_app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
telegram_app.add_handler(conv_handler)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –¥–ª—è webhook —Ä–µ–∂–∏–º–∞
try:
    import asyncio
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π event loop –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    loop.run_until_complete(telegram_app.initialize())
    loop.run_until_complete(telegram_app.start())
    
    logger.info("Telegram Application initialized with persistent event loop.")
except Exception as e:
    logger.error(f"Failed to initialize Telegram App: {e}", exc_info=True)
    raise e

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask ---
flask_app = Flask(__name__)

@flask_app.route('/webhook', methods=['POST'])
def webhook():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    try:
        update = Update.de_json(request.get_json(force=True), telegram_app.bot)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π event loop –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        loop = asyncio.get_event_loop()
        if loop.is_running():
            # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º create_task
            asyncio.create_task(telegram_app.process_update(update))
        else:
            # –ï—Å–ª–∏ loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º run_until_complete
            loop.run_until_complete(telegram_app.process_update(update))
        
        return "OK", 200
    except Exception as e:
        logger.error(f"Webhook error: {e}", exc_info=True)
        return "Error", 500

@flask_app.route('/health', methods=['GET'])
def health():
    """Health check –¥–ª—è Cloud Run"""
    return "OK", 200

@flask_app.route('/', methods=['GET'])
def root():
    """Root endpoint"""
    return "SmetaI Telegram Bot is running!", 200

# --- –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏) ---
if __name__ == "__main__":
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
    logger.info("--- Starting in local polling mode ---")
    telegram_app.run_polling()