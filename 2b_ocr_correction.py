#!/usr/bin/env python3
"""
üî• –ù–û–í–´–ô –≠–¢–ê–ü 2b: OCR –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —á–µ—Ä–µ–∑ Gemini 2.5 Pro

–¶–ï–õ–¨: –¢–æ—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ OCR –ø–µ—Ä–µ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—Ä–æ—Ñ–∏–ª–µ–π (20–ë1 ‚Üí 20–®1, [16n ‚Üí 16–ø)
- –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –º–∞—Ä–æ–∫ —Å—Ç–∞–ª–∏ (–°5 ‚Üí –°—Ç3, –°6 ‚Üí –°235)  
- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª–µ–π
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ—â–Ω—ã–π Gemini 2.5 Pro –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
"""

import sys
import os
from pathlib import Path
from typing import Dict, Any, Optional
import google.generativeai as genai

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from config.config import GEMINI_API_KEY, TEMP_DIR, ensure_directories
from utils.logger import setup_logger, log_step
from utils.file_utils import ensure_file_exists
from utils.token_counter import create_token_counter

logger = setup_logger(__name__)

class OCRCorrector:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –æ—à–∏–±–æ–∫ OCR —á–µ—Ä–µ–∑ Gemini 2.5 Pro"""
    
    def __init__(self, project_path: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞ OCR
        
        Args:
            project_path: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –º–µ—Ç—Ä–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤
        """
        self.setup_gemini()
        self.token_counter = create_token_counter(project_path)
        
        logger.info("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω OCR –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä –Ω–∞ Gemini 2.5 Pro")
    
    def setup_gemini(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini 2.5 Pro"""
        if not GEMINI_API_KEY:
            raise ValueError("GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        genai.configure(
            api_key=GEMINI_API_KEY,
            transport='rest'
        )
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—É—é –º–æ—â–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ç–æ—á–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
        self.model = genai.GenerativeModel('gemini-2.5-pro')
        logger.info("üß† Gemini 2.5 Pro –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è OCR –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏")
    
    def create_ocr_correction_prompt(self, ocr_text: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ OCR –æ—à–∏–±–æ–∫
        
        –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –¥–ª—è –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞
        """
        
        prompt = f"""
–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π. –ù—É–∂–Ω–æ –æ—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —è—á–µ–µ–∫. –†–∞–∑–º–µ—Ä—ã –ø—Ä–æ—Ñ–∏–ª–µ–π –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—à–∏–±–∫–∏ OCR ‚Äî –∏—Å–ø—Ä–∞–≤–ª—è–π –∏—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞.

–î–ê–ù–ù–´–ï –ò –ü–†–ê–í–ò–õ–ê –ö–û–†–†–ï–ö–¶–ò–ò:
1. –ü—Ä–æ—Ñ–∏–ª—å ‚Äî —Ç–∏–ø –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ü—Ä–æ–∫–∞—Ç –ª–∏—Å—Ç–æ–≤–æ–π –≥–æ—Ä—è—á–µ–∫–∞—Ç–∞–Ω—ã–π –ì–û–°–¢ —Ç–∞–∫–æ–π-—Ç–æ").
2. –†–∞–∑–º–µ—Ä ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ, —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–∞–±–∞—Ä–∏—Ç—ã –∏–ª–∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "s5", "125 –ë 2", "I20 W1"). –ò—Å–ø—Ä–∞–≤—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ OCR –æ—à–∏–±–∫–∏ –≤ —Ä–∞–∑–º–µ—Ä–∞—Ö, —É—á–∏—Ç—ã–≤–∞—è:
 - "[16n" ‚Üí "16–ø" (—à–≤–µ–ª–ª–µ—Ä 16 —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª–∫–∞–º–∏)
 - "[200" ‚Üí "200" (—à–≤–µ–ª–ª–µ—Ä 200)
 - "[120" ‚Üí "120" (—à–≤–µ–ª–ª–µ—Ä 120)
 - "[22n" ‚Üí "22–ø" (—à–≤–µ–ª–ª–µ—Ä 22 —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª–∫–∞–º–∏)
 - "C247" ‚Üí "24–£" (—à–≤–µ–ª–ª–µ—Ä 24 —Å —É–∫–ª–æ–Ω–æ–º –ø–æ–ª–æ–∫)
 - "+5" ‚Üí "s5" (–ª–∏—Å—Ç —Ç–æ–ª—â–∏–Ω–æ–π 5 –º–º)
 - "nucm" ‚Üí "–ª–∏—Å—Ç" (–ø—Ä–æ—Å–µ—á–Ω–æ-–≤—ã—Ç—è–∂–Ω–æ–π –ª–∏—Å—Ç)
 - –°–∏–º–≤–æ–ª—ã "[" –∏ "]" —á–∞—Å—Ç–æ –æ—à–∏–±–æ—á–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è –≤–º–µ—Å—Ç–æ –±—É–∫–≤ –∏–ª–∏ —Ü–∏—Ñ—Ä –∏ —Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
3. –ú–∞—Ä–∫–∞ —Å—Ç–∞–ª–∏ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, –∏–∑–≤–ª–µ–∫–∞–π –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –º–∞—Ä–∫–∞ –º–µ—Ç–∞–ª–ª–∞ –ì–û–°–¢, –¢–£"; –∏—Å–ø—Ä–∞–≤–ª—è–π OCR –æ—à–∏–±–∫–∏:
 - "–°—Ç5" ‚Üí "–°—Ç3"
 - "–°245–†–¢" ‚Üí "–°245"
 - "–°255–ö–¢" ‚Üí "–°255"
 - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–∞—Ä–∫–∏: –°—Ç3, –°245, –°255, –°285, –°345, –°375, –°390, –°440, 09–ì2–°, 10–•–°–ù–î, 15–•–°–ù–î.
4. –ú–∞—Å—Å–∞ ‚Äî —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –±–µ—Ä–µ—Ç—Å—è —Å—Ç—Ä–æ–≥–æ –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.
5. –≠–ª–µ–º–µ–Ω—Ç –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–ª–æ–Ω–∫–∏ —Å –º–∞—Å—Å–æ–π: "–±–∞–ª–∫–∏", "—Å—Ç–æ–π–∫–∏", "–Ω–∞—Å—Ç–∏–ª", "—Å–≤—è–∑–∏", "–ª–µ—Å—Ç–Ω–∏—Ü—ã", "–æ–≥—Ä–∞–∂–¥–µ–Ω–∏—è" –∏ –¥—Ä.
6. –ï—Å–ª–∏ —É –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∞–∑–Ω—ã–µ –≤–µ—Å–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏.
7. –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è "–ø–æ–∑" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "11-1", "11-2", "11-3").
8. –ü—Ä–æ–ø—É—Å–∫–∞–π –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤—Ä–æ–¥–µ: "–ò—Ç–æ–≥–æ", "–í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è".
9. –ß–∏—Å–ª–∞ –∑–∞–ø–∏—Å—ã–≤–∞–π —Å —Ç–æ—á–∫–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.25, –Ω–µ 1,25).
10. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ—á–∏—Ç–∞–µ–º—ã –∏–ª–∏ –æ—á–µ–Ω—å –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∑–Ω–∞—á–µ–Ω–∏–µ null.

üìã –í–û–ó–í–†–ê–¢:
–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π.

üîç –ù–∞—á–∏–Ω–∞–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É.
"""
        
        return prompt
    
    def correct_ocr_text(self, ocr_text: str) -> Dict[str, Any]:
        """
        –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ OCR —á–µ—Ä–µ–∑ Gemini 2.5 Pro
        
        Args:
            ocr_text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ OCR
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        
        logger.info("üîß –ù–∞—á–∏–Ω–∞—é –∫–æ—Ä—Ä–µ–∫—Ü–∏—é OCR —á–µ—Ä–µ–∑ Gemini 2.5 Pro...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = self.create_ocr_correction_prompt(ocr_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—é...")
            
            response = self.model.generate_content(
                prompt,
                generation_config=genai.types.GenerationConfig(
                    temperature=0.1,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å - –Ω—É–∂–Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å
                    top_p=0.95,
                    top_k=40,
                    max_output_tokens=8192,
                )
            )
            
            if not response or not response.text:
                raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini 2.5 Pro")
            
            corrected_text = response.text.strip()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
            input_tokens = response.usage_metadata.prompt_token_count if hasattr(response, 'usage_metadata') else len(prompt) // 4
            output_tokens = response.usage_metadata.candidates_token_count if hasattr(response, 'usage_metadata') else len(corrected_text) // 4
            
            metrics = self.token_counter.count_tokens_and_cost(
                model="gemini-2.5-pro",
                input_tokens=input_tokens,
                output_tokens=output_tokens,
                operation="OCR –∫–æ—Ä—Ä–µ–∫—Ü–∏—è"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self.token_counter.log_metrics(logger, metrics)
            
            # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            changes_made = self._analyze_changes(ocr_text, corrected_text)
            
            logger.info(f"‚úÖ OCR –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {changes_made['changes_count']} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            
            return {
                "original_text": ocr_text,
                "corrected_text": corrected_text,
                "changes_analysis": changes_made,
                "token_metrics": metrics,
                "success": True,
                "error": None
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ OCR –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏: {e}"
            logger.error(error_msg)
            
            return {
                "original_text": ocr_text,
                "corrected_text": ocr_text,  # Fallback –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
                "changes_analysis": {"changes_count": 0, "types": []},
                "token_metrics": None,
                "success": False,
                "error": error_msg
            }
    
    def _analyze_changes(self, original: str, corrected: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ"""
        
        if original == corrected:
            return {"changes_count": 0, "types": [], "examples": []}
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
        original_lines = original.split('\n')
        corrected_lines = corrected.split('\n')
        
        changes = []
        changes_count = 0
        
        for i, (orig_line, corr_line) in enumerate(zip(original_lines, corrected_lines)):
            if orig_line != corr_line:
                # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–ª–∏—á–∏—è –≤ —Å—Ç—Ä–æ–∫–µ
                orig_words = orig_line.split()
                corr_words = corr_line.split()
                
                for j, (orig_word, corr_word) in enumerate(zip(orig_words, corr_words)):
                    if orig_word != corr_word:
                        changes.append({
                            "line": i + 1,
                            "position": j + 1,
                            "original": orig_word,
                            "corrected": corr_word,
                            "type": self._classify_change_type(orig_word, corr_word)
                        })
                        changes_count += 1
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–∏–ø—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
        change_types = list(set(change["type"] for change in changes))
        
        return {
            "changes_count": changes_count,
            "types": change_types,
            "examples": changes[:10],  # –ü–µ—Ä–≤—ã–µ 10 –ø—Ä–∏–º–µ—Ä–æ–≤
            "size_change": len(corrected) - len(original)
        }
    
    def _classify_change_type(self, original: str, corrected: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        
        # –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        if any(char.isdigit() for char in original) and any(char.isdigit() for char in corrected):
            return "—Ä–∞–∑–º–µ—Ä_–ø—Ä–æ—Ñ–∏–ª—è"
        elif original.upper().startswith(('–°', 'C', '–°–¢')):
            return "–º–∞—Ä–∫–∞_—Å—Ç–∞–ª–∏"
        elif len(original) > 10 and len(corrected) > 10:
            return "–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ—Ñ–∏–ª—è"
        else:
            return "–ø—Ä–æ—á–µ–µ"

@log_step("OCR –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —á–µ—Ä–µ–∑ Gemini 2.5 Pro", logger)
def correct_ocr_errors(input_path: str, output_path: str = None) -> str:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ OCR –æ—à–∏–±–æ–∫
    
    Args:
        input_path: –ü—É—Ç—å –∫ HTML —Ñ–∞–π–ª—É –ø–æ—Å–ª–µ OCR
        output_path: –ü—É—Ç—å –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        
    Returns:
        –ü—É—Ç—å –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    
    input_path = Path(input_path)
    
    if not ensure_file_exists(input_path):
        raise FileNotFoundError(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ —á—Ç–æ –∏ –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª)
    if output_path is None:
        output_path = input_path.parent / f"{input_path.stem}_corrected.html"
    else:
        output_path = Path(output_path)
    
    logger.info(f"üîß OCR –∫–æ—Ä—Ä–µ–∫—Ü–∏—è: {input_path.name} ‚Üí {output_path.name}")
    
    # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π HTML
    with open(input_path, 'r', encoding='utf-8') as f:
        original_html = f.read()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä
    corrector = OCRCorrector(str(input_path.parent))
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏
    result = corrector.correct_ocr_text(original_html)
    
    if result["success"]:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(result["corrected_text"])
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        changes = result["changes_analysis"]
        logger.info(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        logger.info(f"   üìù –ò–∑–º–µ–Ω–µ–Ω–∏–π: {changes['changes_count']}")
        logger.info(f"   üîß –¢–∏–ø—ã: {', '.join(changes['types']) if changes['types'] else '–Ω–µ—Ç'}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if changes['examples']:
            logger.info("üìã –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
            for example in changes['examples'][:3]:
                logger.info(f"   ‚Ä¢ {example['original']} ‚Üí {example['corrected']} ({example['type']})")
        
        # –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–∏
        corrector.token_counter.log_session_summary(logger)
        
    else:
        logger.warning("‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª")
        # –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(original_html)
    
    return str(output_path)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    
    if len(sys.argv) < 2:
        print("üîß OCR –ö–û–†–†–ï–ö–¶–ò–Ø. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("python 2b_ocr_correction.py <input_html> [output_html]")
        print("–ü—Ä–∏–º–µ—Ä: python 2b_ocr_correction.py temp/page_1_ocr.html")
        print("üí° –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ OCR —á–µ—Ä–µ–∑ Gemini 2.5 Pro")
        sys.exit(1)
    
    input_path = sys.argv[1]
    output_path = sys.argv[2] if len(sys.argv) > 2 else None
    
    try:
        result_path = correct_ocr_errors(input_path, output_path)
        print(f"SUCCESS: {result_path}")
        print("‚úÖ OCR –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"ERROR: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()