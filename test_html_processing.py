#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –±–æ—Ç–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ HTML –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ñ–∞–π–ª–µ: /home/imort/smeta_3_codex/8.html
"""

import asyncio
import os
import sys
import time
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–¥—É
sys.path.insert(0, '/home/imort/smeta_3_codex')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ main_bot.py
from main_bot import (
    create_gemini_model, 
    get_prompt, 
    run_gemini_with_retry, 
    parse_gemini_json,
    run_gemini_with_fallback,
    USE_VERTEX_AI,
    GEMINI_TIMEOUT_SECONDS
)

from google.generativeai.types import GenerationConfig
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [%(levelname)s] - %(message)s'
)
logger = logging.getLogger(__name__)

class MockChat:
    """–ú–æ–∫ –æ–±—ä–µ–∫—Ç –¥–ª—è chat.send_message"""
    async def send_message(self, message):
        print(f"üì± [CHAT] {message}")

async def test_html_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å - –æ–±—Ä–∞–±–æ—Ç–∫–∞ HTML –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    html_path = "/home/imort/smeta_3_codex/8.html"
    user_id = 999999  # –¢–µ—Å—Ç–æ–≤—ã–π user_id
    
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–¢–û–†–û–ô –ß–ê–°–¢–ò –ë–û–¢–ê - –û–ë–†–ê–ë–û–¢–ö–ê HTML")
    print(f"üìÑ –§–∞–π–ª: {html_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if os.path.exists(html_path):
        file_size = os.path.getsize(html_path) / 1024
        print(f"üìè –†–∞–∑–º–µ—Ä: {file_size:.1f} KB")
    else:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {html_path}")
        return None
    
    print(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç: {GEMINI_TIMEOUT_SECONDS} —Å–µ–∫")
    print()
    
    try:
        # –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª
        print("üìñ –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª...")
        with open(html_path, 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        print(f"‚úÖ HTML –∑–∞–≥—Ä—É–∂–µ–Ω, –¥–ª–∏–Ω–∞: {len(html_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        print("üìã –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ HTML:")
        print("-" * 50)
        print(html_content[:500])
        if len(html_content) > 500:
            print(f"... (–µ—â–µ {len(html_content) - 500} —Å–∏–º–≤–æ–ª–æ–≤)")
        print("-" * 50)
        print()
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç –¥–ª—è chat
        mock_chat = MockChat()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å fallback
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É HTML —á–µ—Ä–µ–∑ run_gemini_with_fallback...")
        start_time = time.time()
        
        result = await run_gemini_with_fallback(html_content, user_id, mock_chat)
        
        processing_time = time.time() - start_time
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n" + "="*50)
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–†–ê–ë–û–¢–ö–ò HTML:")
        print("="*50)
        
        if isinstance(result, dict):
            print("‚úÖ –£–°–ü–ï–•! JSON —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∞!")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            print(f"\nüìä –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è:")
            print(f"  –µ–¥–∏–Ω–∏—Ü–∞_–∏–∑–º–µ—Ä–µ–Ω–∏—è: {result.get('–µ–¥–∏–Ω–∏—Ü–∞_–∏–∑–º–µ—Ä–µ–Ω–∏—è', '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
            profiles = result.get('–ø—Ä–æ—Ñ–∏–ª–∏', {})
            print(f"  –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ: {len(profiles)}")
            
            total_mass = 0
            for profile_name, profile_data in profiles.items():
                print(f"\nüîß –ü—Ä–æ—Ñ–∏–ª—å: {profile_name}")
                
                steel_grades = profile_data.get('–º–∞—Ä–∫–∏_—Å—Ç–∞–ª–∏', {})
                print(f"  –º–∞—Ä–æ–∫ —Å—Ç–∞–ª–∏: {len(steel_grades)}")
                
                for grade_name, grade_data in steel_grades.items():
                    sizes = grade_data.get('—Ä–∞–∑–º–µ—Ä—ã', {})
                    print(f"    {grade_name}: {len(sizes)} —Ä–∞–∑–º–µ—Ä–æ–≤")
                    
                    for size_name, size_data in sizes.items():
                        elements = size_data.get('—ç–ª–µ–º–µ–Ω—Ç—ã', [])
                        if elements:
                            for element in elements:
                                mass = element.get('–º–∞—Å—Å–∞', 0)
                                total_mass += mass
            
            print(f"\nüìè –û–±—â–∞—è –º–∞—Å—Å–∞: {total_mass} —Ç")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
            output_path = "/home/imort/smeta_3_codex/test_html_result.json"
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
            
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        print(f"\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {processing_time:.2f} —Å–µ–∫")
        print("üéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        
        return result
        
    except Exception as e:
        print(f"\nüí• –û–®–ò–ë–ö–ê: {e}")
        import traceback
        print("üìã –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:")
        traceback.print_exc()
        return None

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTML...")
    result = asyncio.run(test_html_processing())
    
    if result:
        print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")