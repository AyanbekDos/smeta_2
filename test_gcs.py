#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Cloud Storage
"""

import os
import sys
import asyncio
import json
import gzip
from datetime import datetime, timezone
from PIL import Image, ImageDraw
import io

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ main_bot.py
sys.path.insert(0, '/home/imort/smeta_2')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from main_bot import save_to_gcs, clean_filename, format_utc_timestamp

async def test_gcs_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ GCS"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ GCS...")
    
    # 1. –¢–µ—Å—Ç clean_filename
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º clean_filename:")
    test_names = ["–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è ‚Ññ123.pdf", "file with spaces.pdf", "test@#$%.pdf"]
    for name in test_names:
        clean = clean_filename(name)
        print(f"   '{name}' ‚Üí '{clean}'")
    
    # 2. –¢–µ—Å—Ç format_utc_timestamp
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º format_utc_timestamp:")
    timestamp = format_utc_timestamp()
    print(f"   Timestamp: {timestamp}")
    
    # 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("\n3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_image = Image.new('RGB', (800, 600), color='white')
    img_buffer = io.BytesIO()
    test_image.save(img_buffer, format='PNG')
    test_image_bytes = img_buffer.getvalue()
    print(f"   –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {len(test_image_bytes)} bytes")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π HTML
    test_html = """
    <table>
        <tr><td>–ü—Ä–æ—Ñ–∏–ª—å</td><td>–†–∞–∑–º–µ—Ä</td><td>–ú–∞—Å—Å–∞</td></tr>
        <tr><td>–î–≤—É—Ç–∞–≤—Ä</td><td>20–®1</td><td>100 –∫–≥</td></tr>
    </table>
    """
    print(f"   –¢–µ—Å—Ç–æ–≤—ã–π HTML: {len(test_html)} chars")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π JSON
    test_json = {
        "–µ–¥–∏–Ω–∏—Ü–∞_–∏–∑–º–µ—Ä–µ–Ω–∏—è": "–∫–≥",
        "–ø—Ä–æ—Ñ–∏–ª–∏": {
            "–î–≤—É—Ç–∞–≤—Ä—ã —Å—Ç–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–µ–∫–∞—Ç–∞–Ω–Ω—ã–µ": {
                "–º–∞—Ä–∫–∏_—Å—Ç–∞–ª–∏": {
                    "–°—Ç3": {
                        "—Ä–∞–∑–º–µ—Ä—ã": {
                            "20–®1": {
                                "—ç–ª–µ–º–µ–Ω—Ç—ã": [
                                    {
                                        "—Ç–∏–ø": "–±–∞–ª–∫–∞",
                                        "–ø–æ–∑–∏—Ü–∏–∏": ["–ë1", "–ë2"],
                                        "–º–∞—Å—Å–∞": 100.5
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        }
    }
    print(f"   –¢–µ—Å—Ç–æ–≤—ã–π JSON: {json.dumps(test_json, ensure_ascii=False)[:100]}...")
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ GCS —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏  
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ GCS —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    # –†–µ–∞–ª—å–Ω—ã–π telegram user_id (–ø—Ä–∏–º–µ—Ä)
    user_id = 987654321
    pdf_name = "6-8.pdf"  # –†–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–∑ –∞—Ä—Ö–∏–≤–∞
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–º–∏—Ç–∞—Ü–∏—è PDF —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    real_image = Image.new('RGB', (1200, 800), color='white')
    draw = ImageDraw.Draw(real_image)
    
    # –†–∏—Å—É–µ–º –∏–º–∏—Ç–∞—Ü–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —á–µ—Ä—Ç–µ–∂–∞
    draw.rectangle([50, 50, 1150, 750], outline='black', width=2)
    draw.text((100, 100), "–ö–ú - –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", fill='black')
    draw.text((100, 150), "–°—Ç–∞–¥–∏–æ–Ω –°—Ç—Ä–æ–∏—Ç–µ–ª—å, –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", fill='black')
    draw.text((100, 200), "–¢—Ä–∏–±—É–Ω–∞", fill='black')
    draw.line([100, 300, 1100, 300], fill='black', width=1)
    draw.line([100, 400, 1100, 400], fill='black', width=1)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WebP
    webp_buffer = io.BytesIO()
    real_image.save(webp_buffer, format='WEBP', quality=95, lossless=True)
    real_image_bytes = webp_buffer.getvalue()
    print(f"   –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ WebP: {len(real_image_bytes)} bytes")
    
    # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π HTML (–∏–º–∏—Ç–∞—Ü–∏—è OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    real_html = """
    <div class="page">
        <table class="specification">
            <tr><th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th><th>–†–∞–∑–º–µ—Ä—ã</th><th>–ú–∞—Å—Å–∞</th><th>–ú–∞—Ä–∫–∞ —Å—Ç–∞–ª–∏</th></tr>
            <tr><td>–î–≤—É—Ç–∞–≤—Ä—ã —Å—Ç–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–µ–∫–∞—Ç–∞–Ω–Ω—ã–µ</td><td>I20–®0</td><td>18.64</td><td>C255</td></tr>
            <tr><td>–®–≤–µ–ª–ª–µ—Ä—ã —Å—Ç–∞–ª—å–Ω—ã–µ –≥–Ω—É—Ç—ã–µ</td><td>–ì–Ω.80x4</td><td>4.51</td><td>C255</td></tr>
            <tr><td>–£–≥–æ–ª–∫–∏ —Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–≤–Ω–æ–ø–æ–ª–æ—á–Ω—ã–µ</td><td>L75x5</td><td>0.19</td><td>C255</td></tr>
            <tr><td>–ü—Ä–æ—Ñ–∏–ª–∏ —Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ</td><td>–ì–Ω.60—Ö4</td><td>5.67</td><td>C255</td></tr>
        </table>
        <div class="drawing-info">
            <p>–ö–ú - –°—Ç–∞–¥–∏–æ–Ω –°—Ç—Ä–æ–∏—Ç–µ–ª—å, –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥.–æ. –ö–ª–∏–Ω</p>
            <p>–¢—Ä–∏–±—É–Ω–∞ - –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ</p>
            <p>–°—Ç–∞–¥–∏—è: –†, –õ–∏—Å—Ç: 1, –õ–∏—Å—Ç–æ–≤: 7</p>
        </div>
    </div>
    """
    print(f"   –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π HTML: {len(real_html)} chars")
    
    # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π JSON (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–º–µ—Ç—ã)
    real_json = {
        "–µ–¥–∏–Ω–∏—Ü–∞_–∏–∑–º–µ—Ä–µ–Ω–∏—è": "—Ç",
        "–ø—Ä–æ–µ–∫—Ç": "–°—Ç–∞–¥–∏–æ–Ω –°—Ç—Ä–æ–∏—Ç–µ–ª—å",
        "–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥.–æ. –ö–ª–∏–Ω, –≥. –ö–ª–∏–Ω, —É–ª. –ß–∞–π–∫–æ–≤—Å–∫–æ–≥–æ, –¥. 34",
        "–ø—Ä–æ—Ñ–∏–ª–∏": {
            "–î–≤—É—Ç–∞–≤—Ä—ã —Å—Ç–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–µ–∫–∞—Ç–∞–Ω–Ω—ã–µ": {
                "–º–∞—Ä–∫–∏_—Å—Ç–∞–ª–∏": {
                    "C255": {
                        "—Ä–∞–∑–º–µ—Ä—ã": {
                            "I20–®0": {
                                "—ç–ª–µ–º–µ–Ω—Ç—ã": [
                                    {
                                        "—Ç–∏–ø": "–±–∞–ª–∫–∞",
                                        "–ø–æ–∑–∏—Ü–∏–∏": ["–ë1"],
                                        "–º–∞—Å—Å–∞": 18.64,
                                        "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "–®–≤–µ–ª–ª–µ—Ä—ã —Å—Ç–∞–ª—å–Ω—ã–µ –≥–Ω—É—Ç—ã–µ": {
                "–º–∞—Ä–∫–∏_—Å—Ç–∞–ª–∏": {
                    "C255": {
                        "—Ä–∞–∑–º–µ—Ä—ã": {
                            "–ì–Ω.80x4": {
                                "—ç–ª–µ–º–µ–Ω—Ç—ã": [
                                    {
                                        "—Ç–∏–ø": "—à–≤–µ–ª–ª–µ—Ä",
                                        "–ø–æ–∑–∏—Ü–∏–∏": ["–°–≤1"],
                                        "–º–∞—Å—Å–∞": 4.51,
                                        "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 69
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "–£–≥–æ–ª–∫–∏ —Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–≤–Ω–æ–ø–æ–ª–æ—á–Ω—ã–µ": {
                "–º–∞—Ä–∫–∏_—Å—Ç–∞–ª–∏": {
                    "C255": {
                        "—Ä–∞–∑–º–µ—Ä—ã": {
                            "L75x5": {
                                "—ç–ª–µ–º–µ–Ω—Ç—ã": [
                                    {
                                        "—Ç–∏–ø": "—É–≥–æ–ª–æ–∫",
                                        "–ø–æ–∑–∏—Ü–∏–∏": ["–¥"],
                                        "–º–∞—Å—Å–∞": 0.19,
                                        "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ": 8
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "–æ–±—â–∞—è_–º–∞—Å—Å–∞": 82.6,
        "–º–∞—Ä–∫–∏_—Å—Ç–∞–ª–∏": {
            "C255": 69.23,
            "C355": 13.37
        }
    }
    print(f"   –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π JSON: {json.dumps(real_json, ensure_ascii=False)[:150]}...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã
    test_find_prompt = """
    –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —á–µ—Ä—Ç–µ–∂–µ–π –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.
    
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞: –Ω–∞–π—Ç–∏ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞ –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
    
    –ò—â–∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏:
    - –ó–∞–≥–æ–ª–æ–≤–∫–∏: "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–†–∞–∑–º–µ—Ä—ã", "–ú–∞—Å—Å–∞", "–ú–∞—Ä–∫–∞ —Å—Ç–∞–ª–∏"
    - –î–∞–Ω–Ω—ã–µ –æ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª—è—Ö: –¥–≤—É—Ç–∞–≤—Ä—ã, —à–≤–µ–ª–ª–µ—Ä—ã, —É–≥–æ–ª–∫–∏, —Ç—Ä—É–±—ã
    - –ú–∞—Ä–∫–∏ —Å—Ç–∞–ª–∏: –°255, –°345, –°355 –∏ –¥—Ä.
    
    –ï—Å–ª–∏ –Ω–∞–π–¥–µ—à—å —Ç–∞–±–ª–∏—Ü—É - –≤–µ—Ä–Ω–∏ JSON —Å –¥–∞–Ω–Ω—ã–º–∏.
    –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ—à—å - –≤–µ—Ä–Ω–∏ {"error": "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
    """
    
    test_extract_prompt = """
    –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –º–µ—Ç–∞–ª–ª–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.
    
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞: –∏–∑–≤–ª–µ—á—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ OCR —Ç–µ–∫—Å—Ç–∞.
    
    –°–æ–∑–¥–∞–π JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
    {
        "–µ–¥–∏–Ω–∏—Ü–∞_–∏–∑–º–µ—Ä–µ–Ω–∏—è": "—Ç",
        "–ø—Ä–æ—Ñ–∏–ª–∏": {
            "—Ç–∏–ø_–ø—Ä–æ—Ñ–∏–ª—è": {
                "–º–∞—Ä–∫–∏_—Å—Ç–∞–ª–∏": {
                    "–º–∞—Ä–∫–∞": {
                        "—Ä–∞–∑–º–µ—Ä—ã": {
                            "—Ä–∞–∑–º–µ—Ä": {
                                "—ç–ª–µ–º–µ–Ω—Ç—ã": [{"—Ç–∏–ø": "", "–ø–æ–∑–∏—Ü–∏–∏": [], "–º–∞—Å—Å–∞": 0}]
                            }
                        }
                    }
                }
            }
        }
    }
    """
    
    try:
        result = await save_to_gcs(
            user_id=user_id,
            pdf_name=pdf_name,
            page_image_bytes=real_image_bytes,
            ocr_html=real_html,
            corrected_json=real_json,
            find_prompt=test_find_prompt,
            extract_prompt=test_extract_prompt
        )
        
        if result:
            print("   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ GCS –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("   ‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ GCS –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        return False

async def check_gcs_bucket():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ bucket –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    try:
        from google.cloud import storage
        
        client = storage.Client()
        bucket = client.bucket('test-pdf-bot-dataset')
        
        print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ bucket:")
        
        blobs = list(bucket.list_blobs())
        if not blobs:
            print("   üìÅ Bucket –ø—É—Å—Ç")
            return
            
        print(f"   üìÅ –ù–∞–π–¥–µ–Ω–æ {len(blobs)} —Ñ–∞–π–ª–æ–≤:")
        for blob in blobs[:10]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"   üìÑ {blob.name} ({blob.size} bytes)")
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        folders = set()
        for blob in blobs:
            if '/' in blob.name:
                folder = '/'.join(blob.name.split('/')[:-1])
                folders.add(folder)
        
        print(f"\n   üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫:")
        for folder in sorted(folders):
            print(f"   üìÇ {folder}/")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ bucket: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ GCS —Ñ—É–Ω–∫—Ü–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    gcs_bucket = os.getenv("GCS_BUCKET")
    gcs_creds = os.getenv("GOOGLE_APPLICATION_CREDENTIALS")
    
    print(f"GCS_BUCKET: {gcs_bucket}")
    print(f"GOOGLE_APPLICATION_CREDENTIALS: {gcs_creds}")
    
    if not gcs_bucket:
        print("‚ùå GCS_BUCKET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        sys.exit(1)
        
    if not gcs_creds or not os.path.exists(gcs_creds):
        print("‚ùå GOOGLE_APPLICATION_CREDENTIALS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    result = asyncio.run(test_gcs_functions())
    
    if result:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        asyncio.run(check_gcs_bucket())
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!")
        sys.exit(1)