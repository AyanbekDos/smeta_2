#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –±–æ—Ç–∞ - –∞–Ω–∞–ª–∏–∑ PDF –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ñ–∞–π–ª–µ: /home/imort/smeta_3_codex/test/–ê–Ω–≥–∞—Ä 24x40 –ö–ú.pdf
"""

import asyncio
import os
import sys
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–¥—É
sys.path.insert(0, '/home/imort/smeta_3_codex')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ main_bot.py
from main_bot import (
    create_gemini_model, 
    get_prompt, 
    run_gemini_with_retry, 
    parse_gemini_json,
    USE_VERTEX_AI,
    GEMINI_TIMEOUT_SECONDS
)

from google.generativeai.types import GenerationConfig
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [%(levelname)s] - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_pdf_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å - –ø–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –≤ PDF"""
    
    pdf_path = "/home/imort/smeta_3_codex/test/–ê–Ω–≥–∞—Ä 24x40 –ö–ú.pdf"
    user_id = 999999  # –¢–µ—Å—Ç–æ–≤—ã–π user_id
    
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–í–û–ô –ß–ê–°–¢–ò –ë–û–¢–ê - –ê–ù–ê–õ–ò–ó PDF")
    print(f"üìÑ –§–∞–π–ª: {pdf_path}")
    print(f"üìè –†–∞–∑–º–µ—Ä: {os.path.getsize(pdf_path) / (1024*1024):.1f} MB")
    print(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç: {GEMINI_TIMEOUT_SECONDS} —Å–µ–∫")
    print()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(pdf_path):
            raise FileNotFoundError(f"PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
        print("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç...")
        prompt = get_prompt("find_and_validate.txt")
        if not prompt:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–ø—Ç find_and_validate.txt")
        
        print(f"‚úÖ –ü—Ä–æ–º–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –¥–ª–∏–Ω–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
        print("ü§ñ –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å Gemini...")
        model = create_gemini_model()
        print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: {model.model_name}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        start_time = time.time()
        
        if USE_VERTEX_AI:
            print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º Vertex AI...")
            from vertexai.generative_models import Part as VPart
            with open(pdf_path, 'rb') as f:
                pdf_data = f.read()
            file_part = VPart.from_data(pdf_data, mime_type="application/pdf")
            
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini —á–µ—Ä–µ–∑ Vertex AI...")
            response = await run_gemini_with_retry(
                model,
                prompt,
                file_part,
                user_id,
                generation_config=GenerationConfig(response_mime_type="application/json")
            )
        else:
            print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π Gemini API...")
            import google.generativeai as genai
            gemini_file = genai.upload_file(path=pdf_path)
            print(f"üì§ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {gemini_file.name}")
            
            # –ñ–¥–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
            print("‚è≥ –û–∂–∏–¥–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Ñ–∞–π–ª–∞...")
            await asyncio.sleep(2)
            
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini...")
            response = await run_gemini_with_retry(
                model,
                prompt,
                gemini_file,
                user_id,
                generation_config=GenerationConfig(response_mime_type="application/json")
            )
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            genai.delete_file(gemini_file.name)
            print("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
        
        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
        analysis_time = time.time() - start_time
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {analysis_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("üîç –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
        result = parse_gemini_json(response, user_id, debug_tag="test_pdf")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n" + "="*50)
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:")
        print("="*50)
        
        if isinstance(result, dict):
            page_number = result.get("page", 0)
            print(f"üìÑ –ù–∞–π–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page_number}")
            
            if page_number > 0:
                print("‚úÖ –£–°–ü–ï–•! –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –Ω–∞–π–¥–µ–Ω–∞!")
            else:
                print("‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (page: 0)")
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print("\nüîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini:")
            for key, value in result.items():
                print(f"  {key}: {value}")
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        print(f"\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {analysis_time:.2f} —Å–µ–∫")
        print("üéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        
        return result
        
    except Exception as e:
        print(f"\nüí• –û–®–ò–ë–ö–ê: {e}")
        import traceback
        print("üìã –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:")
        traceback.print_exc()
        return None

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ PDF...")
    result = asyncio.run(test_pdf_analysis())
    
    if result:
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {result}")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")