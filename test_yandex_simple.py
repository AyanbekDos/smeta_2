#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Yandex Object Storage
"""
import os
import boto3
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if os.path.exists('.env.local'):
    load_dotenv('.env.local', override=True)
else:
    load_dotenv()

def test_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Yandex Object Storage"""
    
    access_key = os.getenv("YANDEX_ACCESS_KEY")
    secret_key = os.getenv("YANDEX_SECRET_KEY")  
    bucket_name = os.getenv("YANDEX_BUCKET")
    
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print(f"YANDEX_ACCESS_KEY: {access_key[:10] + '...' if access_key else None}")
    print(f"YANDEX_SECRET_KEY: {secret_key[:10] + '...' if secret_key else None}")
    print(f"YANDEX_BUCKET: {bucket_name}")
    
    if not all([access_key, secret_key, bucket_name]):
        print("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = boto3.client(
            's3',
            endpoint_url='https://storage.yandexcloud.net',
            aws_access_key_id=access_key,
            aws_secret_access_key=secret_key
        )
        
        print("\n‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–∫–µ—Ç–æ–≤
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–∞–∫–µ—Ç–∞–º...")
        response = client.list_buckets()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–∞–∫–µ—Ç–æ–≤: {len(response.get('Buckets', []))}")
        
        for bucket in response.get('Buckets', []):
            print(f"  - {bucket['Name']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–∞–∫–µ—Ç
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∫–µ—Ç {bucket_name}...")
        try:
            response = client.head_bucket(Bucket=bucket_name)
            print(f"‚úÖ –ë–∞–∫–µ—Ç {bucket_name} –¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∫–µ—Ç—É: {e}")
            return False
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ñ–∞–π–ª
        print("\nüì§ –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª...")
        test_content = "test content"
        test_key = "test/connection_test.txt"
        
        try:
            client.put_object(
                Bucket=bucket_name,
                Key=test_key,
                Body=test_content.encode('utf-8'),
                ContentType='text/plain'
            )
            print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {test_key}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
            try:
                obj = client.get_object(Bucket=bucket_name, Key=test_key)
                downloaded_content = obj['Body'].read().decode('utf-8')
                if downloaded_content == test_content:
                    print("‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print("‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            client.delete_object(Bucket=bucket_name, Key=test_key)
            print("üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    test_connection()